{"version":3,"sources":["const.js","Cell.js","Game.js","index.js"],"names":["ROWS","COLS","CELL","BODY","FOOD","KEYS","DIRS","37","38","39","40","Cell","board","handleKey","cells","row","col","key","value","className","push","style","width","height","tabIndex","onKeyDown","Game","props","event","direction","nativeEvent","keyCode","diff","Math","abs","state","nextDirection","snake","gameOver","start","bind","frame","this","setState","alert","head","getNextIndex","food","length","indexOf","end","i","maxCell","floor","random","pop","unshift","setTimeout","x","y","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.296a1162.chunk.js","sourcesContent":["export const ROWS = 20,\r\n  COLS = 20,\r\n  CELL = 30;\r\nexport const BODY = 1,\r\n  FOOD = 2;\r\nexport const START = 44;\r\nexport const KEYS = { left: 37, up: 38, right: 39, down: 40 };\r\nexport const DIRS = { 37: true, 38: true, 39: true, 40: true };\r\n","import React from \"react\";\r\nimport { ROWS, COLS, CELL, BODY, FOOD } from \"./const\";\r\n\r\nfunction Cell({ board, handleKey }) {\r\n  const cells = [];\r\n\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      const key = COLS * row + col;\r\n      const value = board[key];\r\n      const className =\r\n        value === BODY ? \"body-cell\" : value === FOOD ? \"food-cell\" : \"cell\";\r\n      cells.push(<div key={key} className={className} />);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{ width: COLS * CELL, height: ROWS * CELL }}\r\n      tabIndex={0}\r\n      onKeyDown={handleKey}\r\n      className=\"board\"\r\n    >\r\n      {cells}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { ROWS, COLS, BODY, FOOD, START, KEYS, DIRS } from \"./const\";\r\nimport \"./style.css\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      board: [],\r\n      snake: [],\r\n      direction: null,\r\n      gameOver: false\r\n    };\r\n    this.start = this.start.bind(this);\r\n    this.frame = this.frame.bind(this);\r\n    this.handleKey = this.handleKey.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.start();\r\n  }\r\n\r\n  start() {\r\n    const board = [];\r\n    const snake = [START];\r\n\r\n    board[START] = BODY;\r\n\r\n    this.setState(\r\n      {\r\n        board,\r\n        snake,\r\n        direction: KEYS.right\r\n      },\r\n      () => {\r\n        this.frame();\r\n      }\r\n    );\r\n  }\r\n\r\n  end() {\r\n    alert(\"GAME OVER!\");\r\n    this.start();\r\n  }\r\n\r\n  frame() {\r\n    const { snake, board } = this.state;\r\n    let { direction } = this.state;\r\n    const head = this.getNextIndex(snake[0], direction);\r\n    const food = board[head] === FOOD || snake.length === 1;\r\n\r\n    if (snake.indexOf(head) !== -1) {\r\n      this.setState({ gameOver: true });\r\n      return this.end();\r\n    }\r\n\r\n    if (food) {\r\n      const maxCell = ROWS * COLS;\r\n      let i;\r\n      do {\r\n        i = Math.floor(Math.random() * maxCell);\r\n      } while (board[i]);\r\n      board[i] = FOOD;\r\n    } else {\r\n      board[snake.pop()] = null;\r\n    }\r\n\r\n    board[head] = BODY;\r\n    snake.unshift(head);\r\n\r\n    if (this.nextDirection) {\r\n      direction = this.nextDirection;\r\n      this.nextDirection = null;\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        board,\r\n        snake,\r\n        direction\r\n      },\r\n      () => {\r\n        setTimeout(this.frame, 200);\r\n      }\r\n    );\r\n  }\r\n\r\n  handleKey = event => {\r\n    const direction = event.nativeEvent.keyCode;\r\n    const diff = Math.abs(this.state.direction - direction);\r\n\r\n    if (DIRS[direction] && diff !== 0 && diff !== 2) {\r\n      this.nextDirection = direction;\r\n    }\r\n  };\r\n\r\n  getNextIndex(head, direction) {\r\n    let x = head % COLS;\r\n    let y = Math.floor(head / COLS);\r\n\r\n    switch (direction) {\r\n      case KEYS.up:\r\n        y = y <= 0 ? ROWS - 1 : y - 1;\r\n        break;\r\n      case KEYS.down:\r\n        y = y >= ROWS ? 0 : y + 1;\r\n        break;\r\n      case KEYS.left:\r\n        x = x <= 0 ? COLS - 1 : x - 1;\r\n        break;\r\n      case KEYS.right:\r\n        x = x >= COLS - 1 ? 0 : x + 1;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    return COLS * y + x;\r\n  }\r\n\r\n  render() {\r\n    const { board } = this.state;\r\n    return (\r\n      <>\r\n        <header className=\"header\">SNAKE GAME</header>\r\n        <Cell board={board} handleKey={this.handleKey} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}